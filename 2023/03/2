from typing import List
from itertools import combinations

DEBUG=False

def load_dataset(path: str) -> List[str]:
    with open(path, 'r') as file:
        return file.readlines()

def limit(a: int, max_: int) -> int: return min(max(a, 0), max_)

def get_parts(schematic: List[str]) -> List[int]:
    parts, max_r, max_c = [], len(schematic), len(schematic[0])
    for r in range(max_r):
        current, is_part = "", False
        for c in range(max_c):
            if not schematic[r][c].isdigit() :
                if current != "" and is_part:
                    parts.append(int(current))
                current, is_part = "", False
            else:
                current += schematic[r][c]
                for i in range(-1, 2):
                    for j in range(-1, 2):
                        v = schematic[(r+i) % max_r][(c+j) % max_c]
                        if not v.isdigit() and v != '.':
                            is_part = True
                        # print(current, r, c, i, j, (r+i)%max_r, (c+j)%max_c, v, is_part)
        if current != "" and is_part: parts.append(int(current))

    print(parts)
    print(max(parts))
    return parts

def get_gear_ratios(schematic: List[str]) -> List[int]:
    gears, max_r, max_c = {}, len(schematic), len(schematic[0])
    for r in range(max_r):
        current, gears_ = "", set()
        for c in range(max_c):
            if not schematic[r][c].isdigit() :
                if current != "":
                    for gear in gears_:
                        if gear in gears: gears[gear].append(int(current))
                        else: gears[gear] = [int(current)]
                current, gears_ = "", set()
            else:
                current += schematic[r][c]
                for i in range(-1, 2):
                    for j in range(-1, 2):
                        v = schematic[(r+i) % max_r][(c+j) % max_c]
                        if v == '*':
                            gears_.add(((r+i)%max_r, (c+j)%max_c))
        if current != "":
            for gear in gears_:
                if gears[gear]: gears[gear].append(int(current))
                else: gears[gear] = [int(current)]

    # print(gears.items())

    return sum([a*b for ratios in gears.values() if len(ratios) > 1 for a, b in combinations(ratios, 2)])

def get_parts(schematic, condition=lambda x: not x.isdigit() and x != "." and x != "\n"):
    cur, is_part, now, parts = "", False, False, []
    max_r, max_c = len(schematic), len(schematic[0])
    for r in range(max_r):
        for c in range(max_c):
            now = False
            if r > 0 and condition(schematic[r-1][c]): now = is_part = True
            if r < max_r-1 and condition(schematic[r+1][c]): now = is_part = True
            if schematic[r][c].isdigit(): cur += schematic[r][c]
            else:
                if cur and is_part and condition(schematic[r][c]):
                    parts.append(int(cur))
                if not now: is_part = False
                cur = ""
    print(parts)
    return parts

print(sum(get_parts(load_dataset('sample.txt'))))
# print(sum(get_parts(load_dataset('q1.txt'))))

# print(get_gear_ratios(load_dataset('sample.txt')))
# print(get_gear_ratios(load_dataset('q1.txt')))
